Nume: Ştefan Diana Maria
Grupă: 332CC

Tema 3

Organizare

    * În cadrul acestei teme am implementat o expresie data, de forma:
        - C = (At × B + B × A) × Bt, unde:
            - A si B sunt matrice pătratice de dimensiune N x N, cu elemente 
            de tip double
            - A este o matrice superior triunghiulară
            - At este transpusa lui A și Bt este transpusa lui B
            - × este operația de înmulțire
            - + este operația de adunare
        în 3 moduri:
            - blas - o variantă care folosește una sau mai multe funcții din BLAS 
            Atlas pentru realizarea operațiilor de înmulțire și adunare.
            - neopt - o variantă “de mână” fără îmbunătățiri.
            - opt_m - o variantă îmbunătățită a versiunii neopt. Îmbunătățirea are 
            în vedere exclusiv modificarea codului pentru a obține performanțe mai 
            bune.

    * Utilitatea temei constă în:
        - Înțelegerea și implementarea unor operații de bază pe matrice.
        - Îmbunătățirea performanței unui astfel de program.
        - Învățarea utilizării unor funcții din biblioteca BLAS Atlas.
        - Învățarea utilizării unor tehnici de optimizare a înmulțirii și adunării 
        matricelor.

    * Abordare:
        BLAS:
            - Am folosit funcțiile din biblioteca BLAS Atlas pentru a realiza 
            operațiile de înmulțire și adunare a matricelor.
            - Am folosit funcțiile cblas_dgemm și cblas_dtrmm (pentru a utiliza 
            informația despre matricea superior triunghiulară A) pentru înmulțirea 
            matricelor și cblas_daxpy pentru adunarea matricelor.
        
        NEOPT:
            - Am implementat operațiile de înmulțire și adunare a matricelor 
            folosind soluții clasice.
            - At: Avand în vedere ca A este o matrice superior triunghiulară, 
            pentru a realiza transpusa acesteia am completat doar partea de sub 
            diagonala principala, rezultând o matrice inferior triunghiulară.
            - At x B: Am realizat înmulțirea matricelor At si B folosind 3 for-uri 
            imbricate, ultimul mergand doar pana la i, unde i este linia curenta, 
            deoarece At este o matrice inferior triunghiulară.
            - B x A: Am realizat înmulțirea matricelor B si A folosind 3 for-uri 
            imbricate, ultimul mergand doar pana la max(i, j), unde i si j sunt 
            liniile si coloanele curente, deoarece A este o matrice superior 
            triunghiulară.
            - At x B + B x A: Am realizat adunarea rezultatelor At x B si B x A 
            folosind 2 for-uri imbricate.
            - Bt: Am realizat transpusa matricei B folosind 2 for-uri imbricate.
            - (At x B + B x A) x Bt: Am realizat înmulțirea rezultatului adunării 
            cu Bt folosind 3 for-uri imbricate.

        OPT_M:
            - Rezolvarea se face similar cu cea de la NEOPT, cu mici modificări 
            pentru a obține performanțe mai bune.
            - Am detectat constantele din bucla, având grijă să fie reținute în 
            regiștrii, permițând astfel o utilizare optimă a resursei.
            - În plus, am accesat elementele matricelor în mod direct, prin pointeri, 
            pentru a evita accesările multiple în memorie.

        * Interpretarea rezultatelor:
            - opt_m are un număr de instruction references (I refs) si de data references 
            (D refs) mult mai mic decât neopt, datorită optimizărilor făcute, ambele
            fiind depasite de blas.
            - Se poate vedea aceasta diferență și în graficul realizat pe baza timpilor 
            de execuție ai celor 3 variante (varianta neoptimizată este cea mai lentă, 
            detasat - cu cât crește dimensiunea matricelor, cu atât diferența de timp 
            este mai mare).

Implementare

    * Toate funcționalitațile menționate în enunț au fost implementate.


Resurse utilizate

    * https://ocw.cs.pub.ro/courses/asc/laboratoare/09
    * https://www.netlib.org/blas/